@@--
@@-- Gate3 : Template file for main procedure -- Gtk2 version
@@--
-- units from Gtk
with Gtk;            use Gtk;
with Gtk.Main;
with Glib.Error;     use Glib.Error;
with Gtk.Widget;     use Gtk.Widget;
with Gtkada.Builder; use Gtkada.Builder;

-- Ada predefined units
with Ada.Text_IO;    use Ada.Text_IO;
with Ada.Exceptions; use Ada.Exceptions;

-- Application specific units
@@TABLE@@
with @_ADA_OBJECT_@_Callbacks; use @_ADA_OBJECT_@_Callbacks;
@@END_TABLE@@

procedure @_PROJECT_@ is

   Builder       : Gtkada_Builder;
   Error         : Glib.Error.GError;
   GladeFileName : constant String := "@_GLADE_NAME_@";

begin

   Gtk.Main.Init;

   -- Step 1: create a Builder and add the XML data

   Gtk_New (Builder);
   Error := Add_From_File (Builder, GladeFileName);
   if Error /= null then
      Put_Line ("Error : " & Get_Message (Error));
      Error_Free (Error);
      return;
   end if;

   --  Step 2: add calls to "Register_Handler" to associate your
   --  handlers with your callbacks.

@@TABLE@@
   Register_Handler (Builder, "@_SIGNAL_@", @_ADA_SIGNAL_@'Access);
@@END_TABLE@@

   -- Step 3: call Do_Connect. Once to connect all registered handlers

   Do_Connect (Builder);

   Put_Line ("@_PROJECT_@ : loading and connexion of builder OK ");

   -- Step 3.5 : display the windows and all of their children.
   --            Remove objects than are not windows as necessary.

@@TABLE@@
     @@IF@@ @_SHOW_@
   Show_All (Get_Widget (Builder, "@_OBJECT_@"));
     @@END_IF@@
@@END_TABLE@@
   Gtk.Main.Main;

   --  Step 4: when the application terminates
   --          call Unref to free memory associated with the Builder.
   Unref (Builder);
   Put_Line ("Program @_PROJECT_@ is finished !");

exception
   when Error : others =>
      Ada.Text_IO.Put_Line (Ada.Exceptions.Exception_Information (Error));

end @_PROJECT_@;

